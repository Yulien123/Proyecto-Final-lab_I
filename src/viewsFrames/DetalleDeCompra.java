/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package viewsFrames;

import accessData.CompraData;
import accessData.DetalleCData;
import accessData.ProductoData;
import accessData.ProveedorData;
import entity.Compra;
import entity.DetalleCompra;
import entity.Producto;
import entity.Proveedor;
import java.sql.Date;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Usuario
 */
public class DetalleDeCompra extends javax.swing.JInternalFrame {

    private ArrayList<Compra> listaC;
    private ArrayList<DetalleCompra> listaD;
    private ArrayList<Proveedor> listaP;
    private CompraData compraData;
    private DetalleCData detalleData;
    private ProveedorData provData;
    private DefaultTableModel modelo;
    private Compra nuevaCompra;
    private Proveedor nuevoProv;
    
    public DetalleDeCompra() {
        initComponents();
        this.setTitle("Detalle de compras");
        compraData = new CompraData();
        detalleData = new DetalleCData();
        provData = new ProveedorData();
        modelo = new DefaultTableModel();
        listaC = (ArrayList<Compra>) compraData.listarCompras();
        listaP = (ArrayList<Proveedor>) provData.listarProveedor();
        listaD = (ArrayList<DetalleCompra>) detalleData.listarDetalleCompras();
        nuevaCompra = null;
        nuevoProv = null;
        
        enableNuevo(false);
        armarCabeceraTabla();
        cargarTabla();
        cargarProveedores();
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabla = new javax.swing.JTable();
        jcbProveedores = new javax.swing.JComboBox<>();
        jbBuscar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jbGuardar = new javax.swing.JButton();
        jbNuevo = new javax.swing.JButton();
        jbEliminar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jbActualizar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jdcFecha = new com.toedter.calendar.JDateChooser();
        jckbEstado = new javax.swing.JCheckBox();

        jButton1.setText("jButton1");

        jPasswordField1.setText("jPasswordField1");

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setMinimumSize(new java.awt.Dimension(22, 22));
        setPreferredSize(new java.awt.Dimension(522, 522));

        jScrollPane1.setViewportView(jtTabla);
        if (jtTabla.getColumnModel().getColumnCount() > 0) {
            jtTabla.getColumnModel().getColumn(0).setHeaderValue("ID");
            jtTabla.getColumnModel().getColumn(1).setHeaderValue("Cantidad");
            jtTabla.getColumnModel().getColumn(2).setHeaderValue("Precio C");
            jtTabla.getColumnModel().getColumn(3).setHeaderValue("Compra");
            jtTabla.getColumnModel().getColumn(4).setHeaderValue("Producto");
            jtTabla.getColumnModel().getColumn(5).setHeaderValue("Estado");
        }

        jcbProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbProveedoresActionPerformed(evt);
            }
        });

        jbBuscar.setText("Buscar");
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbNuevo.setText("Nuevo");
        jbNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNuevoActionPerformed(evt);
            }
        });

        jbEliminar.setText("Eliminar");
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });

        jLabel4.setText("Proveedor:");

        jLabel6.setText("Fecha:");

        jLabel1.setText("Detalles de compra registrados");

        jbActualizar.setText("Actualizar");
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jLabel5.setText("Estado:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jbNuevo)
                                        .addGap(18, 18, 18)
                                        .addComponent(jbGuardar)
                                        .addGap(18, 18, 18)
                                        .addComponent(jbEliminar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel4))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jcbProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jckbEstado)
                                            .addComponent(jdcFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jbActualizar))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addComponent(jbSalir))
                                    .addComponent(jbBuscar)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(170, 170, 170)
                        .addComponent(jLabel1)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbBuscar)
                        .addGap(152, 152, 152)
                        .addComponent(jbSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbActualizar)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jcbProveedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jdcFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jckbEstado))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbNuevo)
                            .addComponent(jbEliminar)
                            .addComponent(jbGuardar))))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
       dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        String prov = jcbProveedores.getSelectedItem().toString();
        Date fecha = (Date) jdcFecha.getDate();
        boolean estado = jckbEstado.isSelected();
        
        if (prov.isEmpty() || fecha.toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No debe haber campos vacíos");
            return;
        }
        try {
           LocalDate fechaCompra = fecha.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
           for(Proveedor it: listaP){
               if(it.getRazonSocial().equals(prov)){
                   String razon = it.getRazonSocial();
                   String dom = it.getDomicilio();
                   Long tel = it.getTelefono();
                   boolean state = it.isEstado();
                   nuevoProv = new Proveedor(razon,dom,tel,state);
               }
           }
           if(nuevaCompra == null){
               nuevaCompra = new Compra(nuevoProv,fechaCompra);
               compraData.guardarCompra(nuevaCompra);
           }else {
               nuevaCompra.setProveedor(nuevoProv);
               nuevaCompra.setFecha(fechaCompra);
               compraData.modificarCompra(nuevaCompra);
           }
            JOptionPane.showMessageDialog(this, "Compra realizada con éxito");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al ingresar los datos");
            return;
        }
        limpiarCampos();
        enableNuevo(false);
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        borrarFilaTabla();
        cargarTabla();
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jcbProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbProveedoresActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbProveedoresActionPerformed

    private void jbNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNuevoActionPerformed
        Object[] options = {"Si", "No"};
        if (validarCamposVacios() == false) {
            int confirm = JOptionPane.showOptionDialog(null, "¡Perderás estos datos! ¿Desea realizar una Compra? ", "",//contenido de la ventana,icon,msg,title
                    JOptionPane.YES_NO_CANCEL_OPTION, //3 botones si,otro,cancel
                    JOptionPane.QUESTION_MESSAGE,//tipo de icono
                    null, //null para icono por defecto
                    options,//objeto para las opciones
                    options[0]);//seleccion predeterminada
            if (confirm == 0) {
                limpiarCampos();
                enableNuevo(true);
            }
        } else {
            limpiarCampos();
            enableNuevo(true);
        }

    }//GEN-LAST:event_jbNuevoActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
          if (nuevaCompra != null) {
            compraData.eliminarCompra(nuevaCompra);
            nuevaCompra = null;
            limpiarCampos();
        } else {
            JOptionPane.showMessageDialog(this, "No hay un compra seleccionada.");
        }
    }//GEN-LAST:event_jbEliminarActionPerformed
    
    private void cargarProveedores(){
        for (Proveedor item : listaP) {
            jcbProveedores.addItem(item);
        }
    
    }
    
    private void armarCabeceraTabla() {
       // ArrayList<Object> filaCabecera = new ArrayList<>();
        modelo.addColumn("Id");
        modelo.addColumn("Cantidad");
        modelo.addColumn("Precio C");
       modelo.addColumn("Compra");
        modelo.addColumn("Poducto");
        modelo.addColumn("Estado");
        jtTabla.setModel(modelo);
    }
    
    private void cargarTabla(){
        borrarFilaTabla();
        for(DetalleCompra it: listaD) {
            modelo.addRow(new Object[]{it.getIdDetalle(), it.getCantidad(),
                          it.getPrecioCosto(), it.getCompra().getIdCompra() , it.getProducto().getNombreProducto(), it.isEstado()});
        }
    }
    
    private void borrarFilaTabla() {
        int indice = modelo.getRowCount() - 1;
        for (int i = indice; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }
    
    private void limpiarCampos() {
        jcbProveedores.setSelectedIndex(0);
        jdcFecha.setDate(null);
        jckbEstado.setSelected(false);
       // prodEncontrado = null;
    }
    
    private void enableNuevo(boolean flag) {
        jcbProveedores.setEnabled(flag);
        jdcFecha.setEnabled(flag);
        jckbEstado.setEnabled(flag);
        jbBuscar.setEnabled(flag);
        //jbActualizar.setEnabled(flag);
        jbEliminar.setEnabled(flag);
        jbGuardar.setEnabled(flag);
    }
    
    private boolean validarCamposVacios() {
        boolean flag = false;
        
       String campo1= jcbProveedores.getSelectedItem().toString();
       String campo2= jdcFecha.getDateFormatString();
        if (campo1.isEmpty() && campo2.isEmpty()) {
            flag = true;
        }
        return flag;
    }
    
    public void refreshTable() {
        jtTabla.repaint();
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbNuevo;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox<Proveedor> jcbProveedores;
    private javax.swing.JCheckBox jckbEstado;
    private com.toedter.calendar.JDateChooser jdcFecha;
    private javax.swing.JTable jtTabla;
    // End of variables declaration//GEN-END:variables
}
